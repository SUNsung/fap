
        
        #if GTEST_HAS_GLOBAL_WSTRING
  // Converts the given wide string to a narrow string using the UTF-8
  // encoding, and streams the result to this Message object.
  Message& operator <<(const ::wstring& wstr);
#endif  // GTEST_HAS_GLOBAL_WSTRING
    
    #endif  // GTEST_INCLUDE_GTEST_GTEST_TYPED_TEST_H_

    
    // Makes sure this header is not included before gtest.h.
#ifndef GTEST_INCLUDE_GTEST_GTEST_H_
# error Do not include gtest_pred_impl.h directly.  Include gtest.h instead.
#endif  // GTEST_INCLUDE_GTEST_GTEST_H_
    
    template<typename T> inline
bool operator!=(T* ptr, const linked_ptr<T>& x) {
  return ptr != x.get();
}
    
    // Type and function utilities for implementing parameterized tests.
// This file is generated by a SCRIPT.  DO NOT EDIT BY HAND!
//
// Currently Google Test supports at most $n arguments in Values,
// and at most $maxtuple arguments in Combine. Please contact
// googletestframework@googlegroups.com if you need more.
// Please note that the number of arguments to Combine is limited
// by the maximum arity of the implementation of tr1::tuple which is
// currently set at $maxtuple.
    
    /* Set of callbacks used to receive callbacks from bidirectional stream. */
typedef struct bidirectional_stream_callback {
  /* Invoked when the stream is ready for reading and writing.
   * Consumer may call bidirectional_stream_read() to start reading data.
   * Consumer may call bidirectional_stream_write() to start writing
   * data.
   */
  void (*on_stream_ready)(bidirectional_stream* stream);
    }
    
    #include 'test/cpp/qps/benchmark_config.h'
#include 'test/cpp/qps/driver.h'
#include 'test/cpp/qps/report.h'
#include 'test/cpp/qps/server.h'
#include 'test/cpp/util/test_config.h'
#include 'test/cpp/util/test_credentials_provider.h'
    
    #include <winsock2.h>
#include <limits>
    
    #include 'src/core/ext/filters/client_channel/client_channel.h'
#include 'src/core/ext/filters/client_channel/resolver.h'
#include 'src/core/ext/filters/client_channel/resolver/dns/c_ares/grpc_ares_wrapper.h'
#include 'src/core/ext/filters/client_channel/resolver_registry.h'
#include 'src/core/lib/channel/channel_args.h'
#include 'src/core/lib/gpr/env.h'
#include 'src/core/lib/gpr/host_port.h'
#include 'src/core/lib/gpr/string.h'
#include 'src/core/lib/gprpp/orphanable.h'
#include 'src/core/lib/iomgr/combiner.h'
#include 'src/core/lib/iomgr/executor.h'
#include 'src/core/lib/iomgr/iomgr.h'
#include 'src/core/lib/iomgr/resolve_address.h'
#include 'src/core/lib/iomgr/sockaddr_utils.h'
#include 'test/core/util/port.h'
#include 'test/core/util/test_config.h'
    
    #include <grpc/support/port_platform.h>
    
    
    {}  // namespace grpc_core
    
      /* Now reset the env var. We should fall back to the value overridden using
     the api. */
  gpr_setenv(GRPC_DEFAULT_SSL_ROOTS_FILE_PATH_ENV_VAR, '');
  roots = grpc_core::TestDefaultSslRootStore::ComputePemRootCertsForTesting();
  roots_contents = grpc_slice_to_c_string(roots);
  grpc_slice_unref(roots);
  GPR_ASSERT(strcmp(roots_contents, roots_for_override_api) == 0);
  gpr_free(roots_contents);
    
    namespace grpc {
namespace load_reporter {
namespace experimental {
    }
    }
    }
    
    size_t grpc_resource_quota_peek_size(grpc_resource_quota* resource_quota) {
  return static_cast<size_t>(
      gpr_atm_no_barrier_load(&resource_quota->last_size));
}