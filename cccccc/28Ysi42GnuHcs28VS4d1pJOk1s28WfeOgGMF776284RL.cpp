
        
        bool ParseInt64(const std::string& str, int64_t *out)
{
    if (!ParsePrechecks(str))
        return false;
    char *endp = NULL;
    errno = 0; // strtoll will not set errno if valid
    long long int n = strtoll(str.c_str(), &endp, 10);
    if(out) *out = (int64_t)n;
    // Note that strtoll returns a *long long int*, so even if strtol doesn't report a over/underflow
    // we still have to check that the returned value is within the range of an *int64_t*.
    return endp && *endp == 0 && !errno &&
        n >= std::numeric_limits<int64_t>::min() &&
        n <= std::numeric_limits<int64_t>::max();
}
    
    #endif // BITCOIN_CRYPTO_RIPEMD160_H

    
            'Lloop1_%=:'
        'movdqa 0x0(%13),%%xmm9;'
        'paddd  %%xmm4,%%xmm9;'
        'movdqa %%xmm9,%16;'
        'movdqa %%xmm7,%%xmm0;'
        'mov    %k2,%10;'
        'ror    $0xe,%10;'
        'mov    %3,%11;'
        'palignr $0x4,%%xmm6,%%xmm0;'
        'ror    $0x9,%11;'
        'xor    %k2,%10;'
        'mov    %7,%12;'
        'ror    $0x5,%10;'
        'movdqa %%xmm5,%%xmm1;'
        'xor    %3,%11;'
        'xor    %8,%12;'
        'paddd  %%xmm4,%%xmm0;'
        'xor    %k2,%10;'
        'and    %k2,%12;'
        'ror    $0xb,%11;'
        'palignr $0x4,%%xmm4,%%xmm1;'
        'xor    %3,%11;'
        'ror    $0x6,%10;'
        'xor    %8,%12;'
        'movdqa %%xmm1,%%xmm2;'
        'ror    $0x2,%11;'
        'add    %10,%12;'
        'add    %16,%12;'
        'movdqa %%xmm1,%%xmm3;'
        'mov    %3,%10;'
        'add    %12,%9;'
        'mov    %3,%12;'
        'pslld  $0x19,%%xmm1;'
        'or     %5,%10;'
        'add    %9,%6;'
        'and    %5,%12;'
        'psrld  $0x7,%%xmm2;'
        'and    %4,%10;'
        'add    %11,%9;'
        'por    %%xmm2,%%xmm1;'
        'or     %12,%10;'
        'add    %10,%9;'
        'movdqa %%xmm3,%%xmm2;'
        'mov    %6,%10;'
        'mov    %9,%11;'
        'movdqa %%xmm3,%%xmm8;'
        'ror    $0xe,%10;'
        'xor    %6,%10;'
        'mov    %k2,%12;'
        'ror    $0x9,%11;'
        'pslld  $0xe,%%xmm3;'
        'xor    %9,%11;'
        'ror    $0x5,%10;'
        'xor    %7,%12;'
        'psrld  $0x12,%%xmm2;'
        'ror    $0xb,%11;'
        'xor    %6,%10;'
        'and    %6,%12;'
        'ror    $0x6,%10;'
        'pxor   %%xmm3,%%xmm1;'
        'xor    %9,%11;'
        'xor    %7,%12;'
        'psrld  $0x3,%%xmm8;'
        'add    %10,%12;'
        'add    4+%16,%12;'
        'ror    $0x2,%11;'
        'pxor   %%xmm2,%%xmm1;'
        'mov    %9,%10;'
        'add    %12,%8;'
        'mov    %9,%12;'
        'pxor   %%xmm8,%%xmm1;'
        'or     %4,%10;'
        'add    %8,%5;'
        'and    %4,%12;'
        'pshufd $0xfa,%%xmm7,%%xmm2;'
        'and    %3,%10;'
        'add    %11,%8;'
        'paddd  %%xmm1,%%xmm0;'
        'or     %12,%10;'
        'add    %10,%8;'
        'movdqa %%xmm2,%%xmm3;'
        'mov    %5,%10;'
        'mov    %8,%11;'
        'ror    $0xe,%10;'
        'movdqa %%xmm2,%%xmm8;'
        'xor    %5,%10;'
        'ror    $0x9,%11;'
        'mov    %6,%12;'
        'xor    %8,%11;'
        'ror    $0x5,%10;'
        'psrlq  $0x11,%%xmm2;'
        'xor    %k2,%12;'
        'psrlq  $0x13,%%xmm3;'
        'xor    %5,%10;'
        'and    %5,%12;'
        'psrld  $0xa,%%xmm8;'
        'ror    $0xb,%11;'
        'xor    %8,%11;'
        'xor    %k2,%12;'
        'ror    $0x6,%10;'
        'pxor   %%xmm3,%%xmm2;'
        'add    %10,%12;'
        'ror    $0x2,%11;'
        'add    8+%16,%12;'
        'pxor   %%xmm2,%%xmm8;'
        'mov    %8,%10;'
        'add    %12,%7;'
        'mov    %8,%12;'
        'pshufb %%xmm10,%%xmm8;'
        'or     %3,%10;'
        'add    %7,%4;'
        'and    %3,%12;'
        'paddd  %%xmm8,%%xmm0;'
        'and    %9,%10;'
        'add    %11,%7;'
        'pshufd $0x50,%%xmm0,%%xmm2;'
        'or     %12,%10;'
        'add    %10,%7;'
        'movdqa %%xmm2,%%xmm3;'
        'mov    %4,%10;'
        'ror    $0xe,%10;'
        'mov    %7,%11;'
        'movdqa %%xmm2,%%xmm4;'
        'ror    $0x9,%11;'
        'xor    %4,%10;'
        'mov    %5,%12;'
        'ror    $0x5,%10;'
        'psrlq  $0x11,%%xmm2;'
        'xor    %7,%11;'
        'xor    %6,%12;'
        'psrlq  $0x13,%%xmm3;'
        'xor    %4,%10;'
        'and    %4,%12;'
        'ror    $0xb,%11;'
        'psrld  $0xa,%%xmm4;'
        'xor    %7,%11;'
        'ror    $0x6,%10;'
        'xor    %6,%12;'
        'pxor   %%xmm3,%%xmm2;'
        'ror    $0x2,%11;'
        'add    %10,%12;'
        'add    12+%16,%12;'
        'pxor   %%xmm2,%%xmm4;'
        'mov    %7,%10;'
        'add    %12,%k2;'
        'mov    %7,%12;'
        'pshufb %%xmm11,%%xmm4;'
        'or     %9,%10;'
        'add    %k2,%3;'
        'and    %9,%12;'
        'paddd  %%xmm0,%%xmm4;'
        'and    %8,%10;'
        'add    %11,%k2;'
        'or     %12,%10;'
        'add    %10,%k2;'
        'movdqa 0x10(%13),%%xmm9;'
        'paddd  %%xmm5,%%xmm9;'
        'movdqa %%xmm9,%16;'
        'movdqa %%xmm4,%%xmm0;'
        'mov    %3,%10;'
        'ror    $0xe,%10;'
        'mov    %k2,%11;'
        'palignr $0x4,%%xmm7,%%xmm0;'
        'ror    $0x9,%11;'
        'xor    %3,%10;'
        'mov    %4,%12;'
        'ror    $0x5,%10;'
        'movdqa %%xmm6,%%xmm1;'
        'xor    %k2,%11;'
        'xor    %5,%12;'
        'paddd  %%xmm5,%%xmm0;'
        'xor    %3,%10;'
        'and    %3,%12;'
        'ror    $0xb,%11;'
        'palignr $0x4,%%xmm5,%%xmm1;'
        'xor    %k2,%11;'
        'ror    $0x6,%10;'
        'xor    %5,%12;'
        'movdqa %%xmm1,%%xmm2;'
        'ror    $0x2,%11;'
        'add    %10,%12;'
        'add    %16,%12;'
        'movdqa %%xmm1,%%xmm3;'
        'mov    %k2,%10;'
        'add    %12,%6;'
        'mov    %k2,%12;'
        'pslld  $0x19,%%xmm1;'
        'or     %8,%10;'
        'add    %6,%9;'
        'and    %8,%12;'
        'psrld  $0x7,%%xmm2;'
        'and    %7,%10;'
        'add    %11,%6;'
        'por    %%xmm2,%%xmm1;'
        'or     %12,%10;'
        'add    %10,%6;'
        'movdqa %%xmm3,%%xmm2;'
        'mov    %9,%10;'
        'mov    %6,%11;'
        'movdqa %%xmm3,%%xmm8;'
        'ror    $0xe,%10;'
        'xor    %9,%10;'
        'mov    %3,%12;'
        'ror    $0x9,%11;'
        'pslld  $0xe,%%xmm3;'
        'xor    %6,%11;'
        'ror    $0x5,%10;'
        'xor    %4,%12;'
        'psrld  $0x12,%%xmm2;'
        'ror    $0xb,%11;'
        'xor    %9,%10;'
        'and    %9,%12;'
        'ror    $0x6,%10;'
        'pxor   %%xmm3,%%xmm1;'
        'xor    %6,%11;'
        'xor    %4,%12;'
        'psrld  $0x3,%%xmm8;'
        'add    %10,%12;'
        'add    4+%16,%12;'
        'ror    $0x2,%11;'
        'pxor   %%xmm2,%%xmm1;'
        'mov    %6,%10;'
        'add    %12,%5;'
        'mov    %6,%12;'
        'pxor   %%xmm8,%%xmm1;'
        'or     %7,%10;'
        'add    %5,%8;'
        'and    %7,%12;'
        'pshufd $0xfa,%%xmm4,%%xmm2;'
        'and    %k2,%10;'
        'add    %11,%5;'
        'paddd  %%xmm1,%%xmm0;'
        'or     %12,%10;'
        'add    %10,%5;'
        'movdqa %%xmm2,%%xmm3;'
        'mov    %8,%10;'
        'mov    %5,%11;'
        'ror    $0xe,%10;'
        'movdqa %%xmm2,%%xmm8;'
        'xor    %8,%10;'
        'ror    $0x9,%11;'
        'mov    %9,%12;'
        'xor    %5,%11;'
        'ror    $0x5,%10;'
        'psrlq  $0x11,%%xmm2;'
        'xor    %3,%12;'
        'psrlq  $0x13,%%xmm3;'
        'xor    %8,%10;'
        'and    %8,%12;'
        'psrld  $0xa,%%xmm8;'
        'ror    $0xb,%11;'
        'xor    %5,%11;'
        'xor    %3,%12;'
        'ror    $0x6,%10;'
        'pxor   %%xmm3,%%xmm2;'
        'add    %10,%12;'
        'ror    $0x2,%11;'
        'add    8+%16,%12;'
        'pxor   %%xmm2,%%xmm8;'
        'mov    %5,%10;'
        'add    %12,%4;'
        'mov    %5,%12;'
        'pshufb %%xmm10,%%xmm8;'
        'or     %k2,%10;'
        'add    %4,%7;'
        'and    %k2,%12;'
        'paddd  %%xmm8,%%xmm0;'
        'and    %6,%10;'
        'add    %11,%4;'
        'pshufd $0x50,%%xmm0,%%xmm2;'
        'or     %12,%10;'
        'add    %10,%4;'
        'movdqa %%xmm2,%%xmm3;'
        'mov    %7,%10;'
        'ror    $0xe,%10;'
        'mov    %4,%11;'
        'movdqa %%xmm2,%%xmm5;'
        'ror    $0x9,%11;'
        'xor    %7,%10;'
        'mov    %8,%12;'
        'ror    $0x5,%10;'
        'psrlq  $0x11,%%xmm2;'
        'xor    %4,%11;'
        'xor    %9,%12;'
        'psrlq  $0x13,%%xmm3;'
        'xor    %7,%10;'
        'and    %7,%12;'
        'ror    $0xb,%11;'
        'psrld  $0xa,%%xmm5;'
        'xor    %4,%11;'
        'ror    $0x6,%10;'
        'xor    %9,%12;'
        'pxor   %%xmm3,%%xmm2;'
        'ror    $0x2,%11;'
        'add    %10,%12;'
        'add    12+%16,%12;'
        'pxor   %%xmm2,%%xmm5;'
        'mov    %4,%10;'
        'add    %12,%3;'
        'mov    %4,%12;'
        'pshufb %%xmm11,%%xmm5;'
        'or     %6,%10;'
        'add    %3,%k2;'
        'and    %6,%12;'
        'paddd  %%xmm0,%%xmm5;'
        'and    %5,%10;'
        'add    %11,%3;'
        'or     %12,%10;'
        'add    %10,%3;'
        'movdqa 0x20(%13),%%xmm9;'
        'paddd  %%xmm6,%%xmm9;'
        'movdqa %%xmm9,%16;'
        'movdqa %%xmm5,%%xmm0;'
        'mov    %k2,%10;'
        'ror    $0xe,%10;'
        'mov    %3,%11;'
        'palignr $0x4,%%xmm4,%%xmm0;'
        'ror    $0x9,%11;'
        'xor    %k2,%10;'
        'mov    %7,%12;'
        'ror    $0x5,%10;'
        'movdqa %%xmm7,%%xmm1;'
        'xor    %3,%11;'
        'xor    %8,%12;'
        'paddd  %%xmm6,%%xmm0;'
        'xor    %k2,%10;'
        'and    %k2,%12;'
        'ror    $0xb,%11;'
        'palignr $0x4,%%xmm6,%%xmm1;'
        'xor    %3,%11;'
        'ror    $0x6,%10;'
        'xor    %8,%12;'
        'movdqa %%xmm1,%%xmm2;'
        'ror    $0x2,%11;'
        'add    %10,%12;'
        'add    %16,%12;'
        'movdqa %%xmm1,%%xmm3;'
        'mov    %3,%10;'
        'add    %12,%9;'
        'mov    %3,%12;'
        'pslld  $0x19,%%xmm1;'
        'or     %5,%10;'
        'add    %9,%6;'
        'and    %5,%12;'
        'psrld  $0x7,%%xmm2;'
        'and    %4,%10;'
        'add    %11,%9;'
        'por    %%xmm2,%%xmm1;'
        'or     %12,%10;'
        'add    %10,%9;'
        'movdqa %%xmm3,%%xmm2;'
        'mov    %6,%10;'
        'mov    %9,%11;'
        'movdqa %%xmm3,%%xmm8;'
        'ror    $0xe,%10;'
        'xor    %6,%10;'
        'mov    %k2,%12;'
        'ror    $0x9,%11;'
        'pslld  $0xe,%%xmm3;'
        'xor    %9,%11;'
        'ror    $0x5,%10;'
        'xor    %7,%12;'
        'psrld  $0x12,%%xmm2;'
        'ror    $0xb,%11;'
        'xor    %6,%10;'
        'and    %6,%12;'
        'ror    $0x6,%10;'
        'pxor   %%xmm3,%%xmm1;'
        'xor    %9,%11;'
        'xor    %7,%12;'
        'psrld  $0x3,%%xmm8;'
        'add    %10,%12;'
        'add    4+%16,%12;'
        'ror    $0x2,%11;'
        'pxor   %%xmm2,%%xmm1;'
        'mov    %9,%10;'
        'add    %12,%8;'
        'mov    %9,%12;'
        'pxor   %%xmm8,%%xmm1;'
        'or     %4,%10;'
        'add    %8,%5;'
        'and    %4,%12;'
        'pshufd $0xfa,%%xmm5,%%xmm2;'
        'and    %3,%10;'
        'add    %11,%8;'
        'paddd  %%xmm1,%%xmm0;'
        'or     %12,%10;'
        'add    %10,%8;'
        'movdqa %%xmm2,%%xmm3;'
        'mov    %5,%10;'
        'mov    %8,%11;'
        'ror    $0xe,%10;'
        'movdqa %%xmm2,%%xmm8;'
        'xor    %5,%10;'
        'ror    $0x9,%11;'
        'mov    %6,%12;'
        'xor    %8,%11;'
        'ror    $0x5,%10;'
        'psrlq  $0x11,%%xmm2;'
        'xor    %k2,%12;'
        'psrlq  $0x13,%%xmm3;'
        'xor    %5,%10;'
        'and    %5,%12;'
        'psrld  $0xa,%%xmm8;'
        'ror    $0xb,%11;'
        'xor    %8,%11;'
        'xor    %k2,%12;'
        'ror    $0x6,%10;'
        'pxor   %%xmm3,%%xmm2;'
        'add    %10,%12;'
        'ror    $0x2,%11;'
        'add    8+%16,%12;'
        'pxor   %%xmm2,%%xmm8;'
        'mov    %8,%10;'
        'add    %12,%7;'
        'mov    %8,%12;'
        'pshufb %%xmm10,%%xmm8;'
        'or     %3,%10;'
        'add    %7,%4;'
        'and    %3,%12;'
        'paddd  %%xmm8,%%xmm0;'
        'and    %9,%10;'
        'add    %11,%7;'
        'pshufd $0x50,%%xmm0,%%xmm2;'
        'or     %12,%10;'
        'add    %10,%7;'
        'movdqa %%xmm2,%%xmm3;'
        'mov    %4,%10;'
        'ror    $0xe,%10;'
        'mov    %7,%11;'
        'movdqa %%xmm2,%%xmm6;'
        'ror    $0x9,%11;'
        'xor    %4,%10;'
        'mov    %5,%12;'
        'ror    $0x5,%10;'
        'psrlq  $0x11,%%xmm2;'
        'xor    %7,%11;'
        'xor    %6,%12;'
        'psrlq  $0x13,%%xmm3;'
        'xor    %4,%10;'
        'and    %4,%12;'
        'ror    $0xb,%11;'
        'psrld  $0xa,%%xmm6;'
        'xor    %7,%11;'
        'ror    $0x6,%10;'
        'xor    %6,%12;'
        'pxor   %%xmm3,%%xmm2;'
        'ror    $0x2,%11;'
        'add    %10,%12;'
        'add    12+%16,%12;'
        'pxor   %%xmm2,%%xmm6;'
        'mov    %7,%10;'
        'add    %12,%k2;'
        'mov    %7,%12;'
        'pshufb %%xmm11,%%xmm6;'
        'or     %9,%10;'
        'add    %k2,%3;'
        'and    %9,%12;'
        'paddd  %%xmm0,%%xmm6;'
        'and    %8,%10;'
        'add    %11,%k2;'
        'or     %12,%10;'
        'add    %10,%k2;'
        'movdqa 0x30(%13),%%xmm9;'
        'paddd  %%xmm7,%%xmm9;'
        'movdqa %%xmm9,%16;'
        'add    $0x40,%13;'
        'movdqa %%xmm6,%%xmm0;'
        'mov    %3,%10;'
        'ror    $0xe,%10;'
        'mov    %k2,%11;'
        'palignr $0x4,%%xmm5,%%xmm0;'
        'ror    $0x9,%11;'
        'xor    %3,%10;'
        'mov    %4,%12;'
        'ror    $0x5,%10;'
        'movdqa %%xmm4,%%xmm1;'
        'xor    %k2,%11;'
        'xor    %5,%12;'
        'paddd  %%xmm7,%%xmm0;'
        'xor    %3,%10;'
        'and    %3,%12;'
        'ror    $0xb,%11;'
        'palignr $0x4,%%xmm7,%%xmm1;'
        'xor    %k2,%11;'
        'ror    $0x6,%10;'
        'xor    %5,%12;'
        'movdqa %%xmm1,%%xmm2;'
        'ror    $0x2,%11;'
        'add    %10,%12;'
        'add    %16,%12;'
        'movdqa %%xmm1,%%xmm3;'
        'mov    %k2,%10;'
        'add    %12,%6;'
        'mov    %k2,%12;'
        'pslld  $0x19,%%xmm1;'
        'or     %8,%10;'
        'add    %6,%9;'
        'and    %8,%12;'
        'psrld  $0x7,%%xmm2;'
        'and    %7,%10;'
        'add    %11,%6;'
        'por    %%xmm2,%%xmm1;'
        'or     %12,%10;'
        'add    %10,%6;'
        'movdqa %%xmm3,%%xmm2;'
        'mov    %9,%10;'
        'mov    %6,%11;'
        'movdqa %%xmm3,%%xmm8;'
        'ror    $0xe,%10;'
        'xor    %9,%10;'
        'mov    %3,%12;'
        'ror    $0x9,%11;'
        'pslld  $0xe,%%xmm3;'
        'xor    %6,%11;'
        'ror    $0x5,%10;'
        'xor    %4,%12;'
        'psrld  $0x12,%%xmm2;'
        'ror    $0xb,%11;'
        'xor    %9,%10;'
        'and    %9,%12;'
        'ror    $0x6,%10;'
        'pxor   %%xmm3,%%xmm1;'
        'xor    %6,%11;'
        'xor    %4,%12;'
        'psrld  $0x3,%%xmm8;'
        'add    %10,%12;'
        'add    4+%16,%12;'
        'ror    $0x2,%11;'
        'pxor   %%xmm2,%%xmm1;'
        'mov    %6,%10;'
        'add    %12,%5;'
        'mov    %6,%12;'
        'pxor   %%xmm8,%%xmm1;'
        'or     %7,%10;'
        'add    %5,%8;'
        'and    %7,%12;'
        'pshufd $0xfa,%%xmm6,%%xmm2;'
        'and    %k2,%10;'
        'add    %11,%5;'
        'paddd  %%xmm1,%%xmm0;'
        'or     %12,%10;'
        'add    %10,%5;'
        'movdqa %%xmm2,%%xmm3;'
        'mov    %8,%10;'
        'mov    %5,%11;'
        'ror    $0xe,%10;'
        'movdqa %%xmm2,%%xmm8;'
        'xor    %8,%10;'
        'ror    $0x9,%11;'
        'mov    %9,%12;'
        'xor    %5,%11;'
        'ror    $0x5,%10;'
        'psrlq  $0x11,%%xmm2;'
        'xor    %3,%12;'
        'psrlq  $0x13,%%xmm3;'
        'xor    %8,%10;'
        'and    %8,%12;'
        'psrld  $0xa,%%xmm8;'
        'ror    $0xb,%11;'
        'xor    %5,%11;'
        'xor    %3,%12;'
        'ror    $0x6,%10;'
        'pxor   %%xmm3,%%xmm2;'
        'add    %10,%12;'
        'ror    $0x2,%11;'
        'add    8+%16,%12;'
        'pxor   %%xmm2,%%xmm8;'
        'mov    %5,%10;'
        'add    %12,%4;'
        'mov    %5,%12;'
        'pshufb %%xmm10,%%xmm8;'
        'or     %k2,%10;'
        'add    %4,%7;'
        'and    %k2,%12;'
        'paddd  %%xmm8,%%xmm0;'
        'and    %6,%10;'
        'add    %11,%4;'
        'pshufd $0x50,%%xmm0,%%xmm2;'
        'or     %12,%10;'
        'add    %10,%4;'
        'movdqa %%xmm2,%%xmm3;'
        'mov    %7,%10;'
        'ror    $0xe,%10;'
        'mov    %4,%11;'
        'movdqa %%xmm2,%%xmm7;'
        'ror    $0x9,%11;'
        'xor    %7,%10;'
        'mov    %8,%12;'
        'ror    $0x5,%10;'
        'psrlq  $0x11,%%xmm2;'
        'xor    %4,%11;'
        'xor    %9,%12;'
        'psrlq  $0x13,%%xmm3;'
        'xor    %7,%10;'
        'and    %7,%12;'
        'ror    $0xb,%11;'
        'psrld  $0xa,%%xmm7;'
        'xor    %4,%11;'
        'ror    $0x6,%10;'
        'xor    %9,%12;'
        'pxor   %%xmm3,%%xmm2;'
        'ror    $0x2,%11;'
        'add    %10,%12;'
        'add    12+%16,%12;'
        'pxor   %%xmm2,%%xmm7;'
        'mov    %4,%10;'
        'add    %12,%3;'
        'mov    %4,%12;'
        'pshufb %%xmm11,%%xmm7;'
        'or     %6,%10;'
        'add    %3,%k2;'
        'and    %6,%12;'
        'paddd  %%xmm0,%%xmm7;'
        'and    %5,%10;'
        'add    %11,%3;'
        'or     %12,%10;'
        'add    %10,%3;'
        'sub    $0x1,%1;'
        'jne    Lloop1_%=;'
        'mov    $0x2,%1;'
    
    
    {  for (int i = 0; i < iters; i++) {
    VersionEdit vedit;
    vedit.DeleteFile(2, fnum);
    InternalKey start(MakeKey(2*fnum), 1, kTypeValue);
    InternalKey limit(MakeKey(2*fnum+1), 1, kTypeDeletion);
    vedit.AddFile(2, fnum++, 1 /* file size */, start, limit);
    vset.LogAndApply(&vedit, &mu);
  }
  uint64_t stop_micros = env->NowMicros();
  unsigned int us = stop_micros - start_micros;
  char buf[16];
  snprintf(buf, sizeof(buf), '%d', num_base_files);
  fprintf(stderr,
          'BM_LogAndApply/%-6s   %8d iters : %9u us (%7.0f us / iter)\n',
          buf, iters, us, ((float)us) / iters);
}
    
    
    {  delete iter;
  delete table;
  delete file;
  return Status::OK();
}
    
    std::string TableFileName(const std::string& name, uint64_t number) {
  assert(number > 0);
  return MakeFileName(name, number, 'ldb');
}
    
    NS_CC_BEGIN
    
    /**
 @brief This action simulates a page turn from the bottom right hand corner of the screen.
 
 @details It's not much use by itself but is used by the PageTurnTransition.
         Based on an original paper by L Hong et al.
         http://www.parc.com/publication/1638/turning-pages-of-3d-electronic-books.html
  
 @since v0.8.2
 */
class CC_DLL PageTurn3D : public Grid3DAction
{
public:
    /**
     * @js NA 
     */
    virtual GridBase* getGrid() override;
    }
    
    THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
****************************************************************************/
    
        unsigned char getAlphaByIndex(unsigned int i);
    unsigned char getAlphaByPos(const Vec2& pos);
    
    NS_CC_BEGIN
    
    bool ComponentContainer::remove(Component *com)
{
    return remove(com->getName());
}
    
    NS_CC_BEGIN
    
        /** Return the value for the specific property name.
     *
     * @param propertyName The value for the specific property name.
     * @return The value for the specific property name.
     */
    Value getProperty(const std::string& propertyName) const;
    
    class CC_DLL Font : public Ref
{
public:
    virtual FontAtlas* createFontAtlas() = 0;
    }
    
        /** Unload all texture atlas texture create by special file name.
     CAUTION : All component use this font texture should be reset font name, though the file name is same!
               otherwise, it will cause program crash!
    */
    static void unloadFontAtlasTTF(const std::string& fontFileName);