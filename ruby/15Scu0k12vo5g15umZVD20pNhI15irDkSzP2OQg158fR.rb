# No trailing slash
Benchmark.ips do |x|
  path = '/some/very/very/long/path/to/a/file/i/like'
  x.report('pre_pr:#{path}')    { pre_pr(path) }
  x.report('pr:#{path}')        { pr(path) }
  x.report('envygeeks:#{path}') { pr(path) }
  x.compare!
end
    
    strlen = mimes.keys.max_by(&:length).length
output = ''
output << '# Woah there. Do not edit this file directly.\n'
output << '# This file is generated automatically by script/vendor-mimes.\n\n'
mimes = mimes.sort_by { |k,v| k }
output << mimes.map { |mime,extensions| '#{mime.ljust(strlen)} #{extensions.join(' ')}' }.join('\n')
    
          theme.create!
      Jekyll.logger.info 'Your new Jekyll theme, #{theme.name.cyan},' \
        ' is ready for you in #{theme.path.to_s.cyan}!'
      Jekyll.logger.info 'For help getting started, read #{theme.path}/README.md.'
    end
    # rubocop:enable Metrics/AbcSize
  end
end

    
        def defaults_deprecate_type(old, current)
      Jekyll.logger.warn 'Defaults:', 'The '#{old}' type has become '#{current}'.'
      Jekyll.logger.warn 'Defaults:', 'Please update your front-matter defaults to use \
                        'type: #{current}'.'
    end
  end
end

    
    If you run into trouble, you can find helpful resources at https://jekyllrb.com/help/!
            MSG
            raise Jekyll::Errors::MissingDependencyException, name
          end
        end
      end
    end
  end
end

    
        def connection
      ActiveRecord::Base.connection
    end
  end
end

    
          expect(response).to redirect_to(settings_preferences_path)
      user.reload
      expect(user.settings['boost_modal']).to be true
      expect(user.settings['delete_modal']).to be false
    end
  end
end

    
        File.write(dest, Oj.dump(map))
    puts 'Wrote emojo to destination! (#{dest})'
  end
end

    
          subdir = parent.join(leaf)
    
            private
    
          def self.options
        [
          ['--update', 'Run `pod repo update` before listing'],
          ['--stats',  'Show additional stats (like GitHub watchers and forks)'],
        ].concat(super)
      end
    
      context 'called with null values' do
    it 'writes rules for other three' do
      ruleset = 'border-top-color: #0f0; ' +
                'border-right-color: #ff0; ' +
                'border-left-color: #00f;'
      bad_rule = 'border-bottom-color: null;'
    
          expect('.border-width-implied-left').to have_rule(rule)
    end
  end
    
        @buttons_list = %w(
      button
      [type='button']
      [type='reset']
      [type='submit']
    )
  end
    
          expect('.margin-all').to have_rule(rule)
    end
  end
    
      context 'called with arguments (1, $value: 4em 6em)' do
    it 'outputs quadruple the first value from the default scale' do
      expect('.one-double-value').to have_rule('font-size: 1.024em')
    end
  end
    
          expect('.padding-implied-left').to have_rule(rule)
    end
  end
    
      context 'expands hover text inputs' do
    it 'finds selectors' do
      list = @inputs_list.map { |input| '#{input}:hover' }
      list = list.join(', ')
      ruleset = 'content: #{list};'