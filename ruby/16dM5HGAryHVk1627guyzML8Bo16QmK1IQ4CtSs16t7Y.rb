
        
          platform_is_not :solaris do # See https://github.com/ruby/spec/issues/134
    it 'returns Infinity for Rational(0, 1) passed a negative Float' do
      [-1.0, -3.0, -3.14].each do |exponent|
        (Rational(0, 1) ** exponent).infinite?.should == 1
      end
    end
  end
end

    
    def grammar(f, out)
  while line = f.gets
    case line
    when %r</\*% *ripper(?:\[(.*?)\])?: *(.*?) *%\*/>
      out << DSL.new($2, ($1 || '').split(',')).generate << $/
    when %r</\*%%%\*/>
      out << '#if 0' << $/
    when %r</\*%>
      out << '#endif' << $/
    when %r<%\*/>
      out << $/
    when /\A%%/
      out << '%%' << $/
      return
    else
      out << line
    end
  end
end
    
      def with_script_lines
    script_lines = nil
    debug_lines = {}
    Object.class_eval do
      if defined?(SCRIPT_LINES__)
        script_lines = SCRIPT_LINES__
        remove_const :SCRIPT_LINES__
      end
      const_set(:SCRIPT_LINES__, debug_lines)
    end
    yield debug_lines
  ensure
    Object.class_eval do
      remove_const :SCRIPT_LINES__
      const_set(:SCRIPT_LINES__, script_lines) if script_lines
    end
  end
    
      it 'adds the directory after directories added by -I within RUBYOPT' do
    rubyopt_dir = tmp('rubyopt_include')
    rubylib_dir = tmp('rubylib_include')
    ENV['RUBYLIB'] = @pre + rubylib_dir
    paths = ruby_exe('puts $LOAD_PATH', env: { 'RUBYOPT' => '-I#{rubyopt_dir}' }).lines.map(&:chomp)
    paths.should include(rubyopt_dir)
    paths.should include(rubylib_dir)
    paths.index(rubyopt_dir).should < paths.index(rubylib_dir)
  end
    
        @cmd.handle_options %w[-P HighSecurity]
    
      def test_basic_auth_md5
    Tempfile.create('test_webrick_auth') {|tmpfile|
      tmpfile.puts('webrick:$apr1$IOVMD/..$rmnOSPXr0.wwrLPZHBQZy0')
      tmpfile.flush
      assert_raise(NotImplementedError){
        WEBrick::HTTPAuth::Htpasswd.new(tmpfile.path)
      }
    }
  end
    
    if !Dir.respond_to?(:mktmpdir)
  # copied from lib/tmpdir.rb
  def Dir.mktmpdir(prefix_suffix=nil, tmpdir=nil)
    case prefix_suffix
    when nil
      prefix = 'd'
      suffix = ''
    when String
      prefix = prefix_suffix
      suffix = ''
    when Array
      prefix = prefix_suffix[0]
      suffix = prefix_suffix[1]
    else
      raise ArgumentError, 'unexpected prefix_suffix: #{prefix_suffix.inspect}'
    end
    tmpdir ||= Dir.tmpdir
    t = Time.now.strftime('%Y%m%d')
    n = nil
    begin
      path = '#{tmpdir}/#{prefix}#{t}-#{$$}-#{rand(0x100000000).to_s(36)}'
      path << '-#{n}' if n
      path << suffix
      Dir.mkdir(path, 0700)
    rescue Errno::EEXIST
      n ||= 0
      n += 1
      retry
    end
    
      def test_queue_push_return_value
    q = Queue.new
    retval = q.push(1)
    assert_same q, retval
  end
    
    # This file, the companion file tables.rb (autogenerated), and the module,
# constants, and method defined herein are part of the implementation of the
# built-in String class, not part of the standard library. They should
# therefore never be gemified. They implement the methods
# String#unicode_normalize, String#unicode_normalize!, and String#unicode_normalized?.
#
# They are placed here because they are written in Ruby. They are loaded on
# demand when any of the three methods mentioned above is executed for the
# first time. This reduces the memory footprint and startup time for scripts
# and applications that do not use those methods.
#
# The name and even the existence of the module UnicodeNormalize and all of its
# content are purely an implementation detail, and should not be exposed in
# any test or spec or otherwise.
    
      # Clean the keg of formula @f
  def clean
    ObserverPathnameExtension.reset_counts!
    
        formulae = ARGV.include?('--installed') ? Formula.installed : Formula
    recursive = ARGV.flag? '--recursive'
    only_installed_arg = ARGV.include?('--installed') &&
                         !ARGV.include?('--include-build') &&
                         !ARGV.include?('--include-test') &&
                         !ARGV.include?('--include-optional') &&
                         !ARGV.include?('--skip-recommended')
    
    desc 'Creates a sandbox application for simulating the Spree code in a deployed Rails app'
task :sandbox do
  Bundler.with_clean_env do
    exec('lib/sandbox.sh')
  end
end

    
            def address_params
          params.require(:address).permit(permitted_address_attributes)
        end
    
            def stock_location_params
          params.require(:stock_location).permit(permitted_stock_location_attributes)
        end
      end
    end
  end
end
