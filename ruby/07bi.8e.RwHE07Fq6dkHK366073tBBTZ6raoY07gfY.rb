
        
          it 'provides hash-style access to its properties with both symbol and string keys' do
    expect(location[:lat]).to be_a Float
    expect(location[:lat]).to eq 2.0
    expect(location['lat']).to be_a Float
    expect(location['lat']).to eq 2.0
  end
    
    describe Utils do
  describe '#unindent' do
    it 'unindents to the level of the greatest consistant indention' do
      expect(Utils.unindent(<<-MD)).to eq('Hello World')
        Hello World
      MD
    
      let :old_template do
    {
      'url' => '{{url}}',
      'title' => '{{ title }}',
      'description' => '{{ hovertext }}',
      'comment' => '{{ comment }}'
    }
  end
    
        if args.list_checks?
      puts checks.all.sort
      exit
    end
    
        # @!attribute [w] option
    # Options can be used as arguments to `brew install`.
    # To switch features on/off: `'with-something'` or `'with-otherthing'`.
    # To use other software: `'with-other-software'` or `'without-foo'`
    # Note that for {.depends_on} that are `:optional` or `:recommended`, options
    # are generated automatically.
    #
    # There are also some special options:
    #
    # - `:universal`: build a universal binary/library (e.g. on newer Intel Macs
    #   this means a combined x86_64/x86 binary/library).
    # <pre>option 'with-spam', 'The description goes here without a dot at the end'</pre>
    # <pre>option 'with-qt', 'Text here overwrites the autogenerated one from 'depends_on 'qt' => :optional''</pre>
    # <pre>option :universal</pre>
    def option(name, description = '')
      specs.each { |spec| spec.option(name, description) }
    end
    
          def tag
        if MacOS.version >= :lion
          MacOS.cat
        elsif MacOS.version == :snow_leopard
          Hardware::CPU.is_64_bit? ? :snow_leopard : :snow_leopard_32
        else
          # Return, e.g., :tiger_g3, :leopard_g5_64, :leopard_64 (which is Intel)
          if Hardware::CPU.type == :ppc
            tag = '#{MacOS.cat}_#{Hardware::CPU.family}'.to_sym
          else
            tag = MacOS.cat
          end
          MacOS.prefer_64_bit? ? '#{tag}_64'.to_sym : tag
        end
      end
    end
    
        it 'with universal' do
      expect_offense(<<~RUBY)
        class Foo < Formula
          url 'https://example.com/foo-1.0.tgz'
          option :universal
          ^^^^^^^^^^^^^^^^^ macOS has been 64-bit only since 10.6 so universal options are deprecated.
        end
      RUBY
    end
    
    RSpec.describe RuboCop::Cop::Layout::MultilineArrayBraceLayout, :config do
  subject(:cop) { described_class.new(config) }
    
    module RuboCop
  module AST
    # A node extension for `for` nodes. This will be used in place of a plain
    # node when the builder constructs the AST, making its methods available
    # to all `for` nodes within RuboCop.
    class ForNode < Node
      # Returns the keyword of the `for` statement as a string.
      #
      # @return [String] the keyword of the `until` statement
      def keyword
        'for'
      end
    
    namespace :gem do
  def version
    require 'spree/core/version'
    Spree.version
  end
    
            def new; end
    
            def new; end