
        
            def type=(value)
      @type = value.try :strip
    end
    
        def initialize(content)
      @content = content
      @html = document? ? parse_as_document : parse_as_fragment
    end
    
        private
    
            if mod
          if name == 'Index'
            return slug.split('/')[1..-2].join('/')
          elsif name == 'Angular'
            return slug.split('/').last.split('-').first
          end
        end
    
            # Remove ng-* attributes
        css('*').each do |node|
          node.attributes.each_key do |attribute|
            node.remove_attribute(attribute) if attribute.start_with? 'ng-'
          end
        end
    
        unless si['OS'] =~ /Windows (NT|XP|2000|2003|\.NET)/i
      print_warning('Loaded Mimikatz on a newer OS (#{si['OS']}). Did you mean to 'load kiwi' instead?')
    end
  end
    
            ; perform the call to LoadLibraryA...
        mov rcx, r14           ; set the param for the library to load
        mov r10d, #{Rex::Text.block_api_hash('kernel32.dll', 'LoadLibraryA')}
        call rbp               ; LoadLibraryA( 'ws2_32' )
    
        # Generate the advanced stager if we have space
    if self.available_space && required_space <= self.available_space
      conf[:exitfunk] = datastore['EXITFUNC']
      conf[:reliable] = true
    end
    
    require 'msf/core/handler/bind_tcp'
require 'msf/core/payload/windows/x64/bind_tcp_rc4'
    
      LogSource = 'core'
end
    
          # @return [BuildType] the build type for a static framework
      #
      def self.static_framework
        new(:linkage => :static, :packaging => :framework)
      end
    
    def fixture_aggregate_target(pod_targets = [], host_requires_frameworks = false, user_build_configurations = Pod::Target::DEFAULT_BUILD_CONFIGURATIONS,
                             archs = [], platform = Pod::Platform.new(:ios, '6.0'), target_definition = nil)
  target_definition ||= pod_targets.flat_map(&:target_definitions).first || fixture_target_definition
  Pod::AggregateTarget.new(config.sandbox, host_requires_frameworks, user_build_configurations, archs, platform,
                           target_definition, config.sandbox.root.dirname, nil, nil, 'Release' => pod_targets)
end
    
    module Pod
  class Installer
    class UserProjectIntegrator
      # This class is responsible for integrating the library generated by a
      # {TargetDefinition} with its destination project.
      #
      class TargetIntegrator
        autoload :XCConfigIntegrator, 'cocoapods/installer/user_project_integrator/target_integrator/xcconfig_integrator'
    
        context 'with an empty body' do
      let(:source) do
        'module Foo; end'
      end
    
      describe '.new' do
    let(:source) do
      'class << self; end'
    end
    
            # If the call has a second argument, we can insert a line
        # break before the second argument and the rest of the
        # argument will get auto-formatted onto separate lines
        # by other cops.
        has_second_element = elements.length >= 2
    
            def contains_guard_clause?(node)
          node.if_branch&.guard_clause?
        end
    
          # Checks whether the `block` literal is delimited by `do`-`end` keywords.
      #
      # @return [Boolean] whether the `block` literal is enclosed in `do`-`end`
      def keywords?
        loc.end&.is?('end')
      end
    
          # http://stackoverflow.com/questions/9445760/bit-shifting-in-ruby
      def left_shift int, shift
        r = ((int & 0xFF) << (shift & 0x1F)) & 0xFFFFFFFF
        # 1>>31, 2**32
        (r & 2147483648) == 0 ? r : r - 4294967296
      end
    
          def has_header
        if @header
          @header.formatted_data.strip.empty? ? false : true
        else
          @header = (@page.header || false)
          !!@header
        end
      end
    
        assert_no_match /Delete this Page/, last_response.body, ''Delete this Page' link not blocked in page template'
    assert_no_match /New/,              last_response.body, ''New' button not blocked in page template'
    assert_no_match /Upload/,           last_response.body, ''Upload' link not blocked in page template'
    assert_no_match /Rename/,           last_response.body, ''Rename' link not blocked in page template'
    assert_no_match /Edit/,             last_response.body, ''Edit' link not blocked in page template'
    
    
    
    # Set ruby to UTF-8 mode
# This is required for Ruby 1.8.7 which gollum still supports.
$KCODE = 'U' if RUBY_VERSION[0, 3] == '1.8'
    
      describe 'client middleware' do
    class Stopper
      def call(worker_class, job, queue, r)
        raise ArgumentError unless r
        yield if job['args'].first.odd?
      end
    end
    
          describe 'processed' do
        it 'retrieves hash of dates' do
          Sidekiq.redis do |c|
            c.incrby('stat:processed:2012-12-24', 4)
            c.incrby('stat:processed:2012-12-25', 1)
            c.incrby('stat:processed:2012-12-26', 6)
            c.incrby('stat:processed:2012-12-27', 2)
          end
          Time.stub(:now, Time.parse('2012-12-26 1:00:00 -0500')) do
            s = Sidekiq::Stats::History.new(2)
            assert_equal({ '2012-12-26' => 6, '2012-12-25' => 1 }, s.processed)
    
      it 'should remove all but last Sidekiq::DeadSet.max_jobs-1 jobs' do
    Sidekiq::DeadSet.stub(:max_jobs, 3) do
      dead_set.kill(Sidekiq.dump_json(jid: '000101', class: 'MyWorker1', args: []))
      dead_set.kill(Sidekiq.dump_json(jid: '000102', class: 'MyWorker2', args: []))
      dead_set.kill(Sidekiq.dump_json(jid: '000103', class: 'MyWorker3', args: []))
    end
    
        it 'logs the exception to Sidekiq.logger' do
      Component.new.invoke_exception(:a => 1)
      @str_logger.rewind
      log = @str_logger.readlines
      assert_match(/'a':1/, log[0], 'didn't include the context')
      assert_match(/Something didn't work!/, log[1], 'didn't include the exception message')
      assert_match(/test\/test_exception_handler.rb/, log[2], 'didn't include the backtrace')
    end
    
        assert_equal obj.attribute, Psych.load(Psych.dump(obj)).attribute
  end
end

    
      before do
    require 'sidekiq/testing/inline'
    Sidekiq::Testing.inline!
  end
    
      config.vm.define :smartos do |smartos|
    smartos.vm.box = 'smartos-base1310-64-virtualbox-20130806.box'
    smartos.vm.box_url = 'http://dlc-int.openindiana.org/aszeszo/vagrant/smartos-base1310-64-virtualbox-20130806.box'
  end
    
        pkg_origin = attributes[:freebsd_origin]
    if pkg_origin == 'fpm/<name>'  # fill in default
      pkg_origin = 'fpm/#{name}'
    end
    
        if attributes[:python_pip].nil?
      # no pip, use easy_install
      logger.debug('no pip, defaulting to easy_install', :easy_install => attributes[:python_easyinstall])
      safesystem(attributes[:python_easyinstall], '-i',
                 attributes[:python_pypi], '--editable', '-U',
                 '--build-directory', target, want_pkg)
    else
      logger.debug('using pip', :pip => attributes[:python_pip])
      # TODO: Support older versions of pip
      safesystem(attributes[:python_pip], 'download', '--no-clean', '--no-deps', '--no-binary', ':all:', '-i', attributes[:python_pypi], '--build', target,  want_pkg)
    end
    
      def specfile(builddir)
    '#{builddir}/pkginfo'
  end