
        
        
def unicode_is_ascii(u_string):
    '''Determine if unicode string only contains ASCII characters.
    
    
@pytest.mark.skipif(sys.version_info < (2,7), reason='Only run on Python 2.7+')
def test_system_ssl():
    '''Verify we're actually setting system_ssl when it should be available.'''
    assert info()['system_ssl']['version'] != ''
    
    
class TestIsValidCIDR:
    
        def proxy_headers(self, proxy):
        '''Returns a dictionary of the headers to add to any request sent
        through a proxy. This works with urllib3 magic to ensure that they are
        correctly sent to the proxy, rather than in a tunnelled request if
        CONNECT is being used.
    
    This module handles import compatibility issues between Python 2 and
Python 3.
'''
    
            (2016-01, url0), 2
        (2016-01, url1), 1
        '''
        yield key, sum(values)
    
    
class DefaultCategories(Enum):
    
        This will typically be run on the result of the communicate() method
    of a subprocess.Popen object.
    '''
    stderr = re.sub(r'\[\d+ refs\]\r?\n?$'.encode(), ''.encode(), stderr).strip()
    return stderr
    
    
class FakeFuture( object ):
  '''A fake version of a future response object, just about suitable for
  mocking a server response as generated by PostDataToHandlerAsync.
  Not usually used directly. See MockAsyncServerResponse* methods'''
  def __init__( self, done, response = None, exception = None ):
    self._done = done
    
    from __future__ import unicode_literals
from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
# Not installing aliases from python-future; it's unreliable and slow.
from builtins import *  # noqa
    
    
def SendEventNotificationAsync( event_name,
                                buffer_number = None,
                                extra_data = None ):
  event = EventNotification( event_name, buffer_number, extra_data )
  event.Start()

    
            This will normally return the class in which it is defined.
        (which is *not* necessarily the same as the cls classmethod parameter).
        '''
        raise NotImplementedError()
    
    This module integrates Tornado with the ``asyncio`` module introduced
in Python 3.4. This makes it possible to combine the two libraries on
the same event loop.
    
        def test_overrun(self):
        # If a call runs for too long, we skip entire cycles to get
        # back on schedule.
        call_durations = [9, 9, 10, 11, 20, 20, 35, 35, 0, 0, 0]
        expected = [
            1010, 1020, 1030,  # first 3 calls on schedule
            1050, 1070,  # next 2 delayed one cycle
            1100, 1130,  # next 2 delayed 2 cycles
            1170, 1210,  # next 2 delayed 3 cycles
            1220, 1230,  # then back on schedule.
        ]
    
        # Data above this size will be appended separately instead
    # of extending an existing bytearray
    _large_buf_threshold = 2048
    
            event = Event()
        test = self
        body = []