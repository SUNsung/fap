
        
                    if item.get('extattrs'):
                for key, value in iteritems(flatten_extattrs(item['extattrs'])):
                    if key.startswith('ansible_'):
                        hostvars[name][key] = value
                    else:
                        if 'extattrs' not in hostvars[name]:
                            hostvars[name]['extattrs'] = {}
                        hostvars[name]['extattrs'][key] = value
    
        def _get_vm_info(self, vm, prefix='vmware'):
        '''
        Return a flattened dict with info about the given virtual machine.
        '''
        vm_info = {
            'name': vm.name,
        }
        for attr in ('datastore', 'network'):
            try:
                value = getattr(vm, attr)
                vm_info['%ss' % attr] = self._get_obj_info(value, depth=0)
            except AttributeError:
                vm_info['%ss' % attr] = []
        try:
            vm_info['resourcePool'] = self._get_obj_info(vm.resourcePool, depth=0)
        except AttributeError:
            vm_info['resourcePool'] = ''
        try:
            vm_info['guestState'] = vm.guest.guestState
        except AttributeError:
            vm_info['guestState'] = ''
        for k, v in self._get_obj_info(vm.summary, depth=0).items():
            if isinstance(v, collections.MutableMapping):
                for k2, v2 in v.items():
                    if k2 == 'host':
                        k2 = 'hostSystem'
                    vm_info[k2] = v2
            elif k != 'vm':
                vm_info[k] = v
        vm_info = self._flatten_dict(vm_info, prefix)
        if ('%s_ipAddress' % prefix) in vm_info:
            vm_info['ansible_ssh_host'] = vm_info['%s_ipAddress' % prefix]
        return vm_info
    
    from ansible.config.manager import ConfigManager
    
    # The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set 'language' from the command line for these cases.
language = None
    
        # Walk the whole docs tree looking for :ref:.  Anywhere those are found, search for `([^`]*)`
    for dirpath, dirnames, filenames in os.walk(topdir):
        for filename in filenames:
            with open(os.path.join(dirpath, filename), 'rb') as f:
                data = f.read()
                data = to_text(data)
                for ref_match in re.finditer(REF_RE, data):
                    label = ref_match.group(1)
    
    # If false, no index is generated.
# epub_use_index = True
    
    parser = argparse.ArgumentParser()
parser.add_argument(
    'path',
    help='Path to a directory that will be recursively walked. All .yml and .yaml files will be evaluated '
         'and uses of tests as filters will be conveted to proper jinja test syntax files to have test syntax '
         'fixed'
)
args = parser.parse_args()
    
        args = parser.parse_args()
    
        def test_to_partial_json(self):
        self.assertEqual(self.regr.to_json(), {
            'body': mock.sentinel.body,
            'uri': mock.sentinel.uri,
            'authorizations': None,
        })
    
    
if __name__ == '__main__':
    unittest.main()  # pragma: no cover
